package com.sist.main;
/*
 * 자바 클래스의 구성 => 객체지향 특성 (접근지정어, 캡슐화, 재사용, 수정, 추가)***
 *                            -------- public / protected / default / private
 *                            1) 변수 2) 메소드 3) 생성자
 *                            캡슐화 : 데이터 보호 => 모든 변수는 private
 *                            재사용 : 변경해서 사용(상속 is-a), 있는 그대로(포함 has-a) 
 *                            수정 : 오버라이딩, 추가 : 오버로딩
 *                           
 * -------------
 * class ClassName
 * {
 *  ------------------
 *   변수
 *    1) 멤버변수 (인스턴스변수 => new 메모리에 저장할 때 따로 저장되는 변수)
 *     형식) [접근지정어] 데이터형 변수명 = 값 (값이 없다면 디폴트값)
 *          int a; => 0
 *          int a=10; (o) // 명시적인 초기화
 *          
 *          // class 내에서는 구현을 할 수 없다
 *          int a;
 *          a=10; (x) => 구현 ===> 변수의 초기화(생성자)
 *          => 생성시점: new를 이용해서 메모리 공간이 확보되었을 때, 소멸시점: 객체=null이거나 사용하지 않을 때 - 소멸은 가비지 컬렉션(메모리 회수)에 의해 소멸됨
 *          => 가장 많이 사용되는 변수 (여러 개를 저장)
 *          => 사용방법
 *             class A
 *             {
 *               int age; // 0
 *               String name; // null
 *             }
 *             A a=new A(); => age,name의 공간이 생성 // a는 주소를 가지고 있어 객체라고 불린다(인스턴스 변수):메모리에 저장된 상태
 *                 ---
 *             => a.age // a는 .을 통해서 a만 접근가능
 *             => a.name
 *             A b=new A(); => age,name의 공간이 생성
 *                 ---
 *             => b.age
 *             => b.name
 *             ==============> class는 한 개만 설계 =====> new를 이용해서 저장을 여러 개
 *             
 *             -a-
 *             100   => 100 -----------
 *             ---            ------ age
 *                              25
 *                            ------ name
 *                             홍길동
 *                            ------
 *                          -----------
 *             -b-
 *             200   => 200 -----------
 *             ---            ------ age
 *                              20
 *                            ------ name
 *                             심청이
 *                            ------
 *                          -----------
 *                      
 *             b=a; // 저장된 데이터관리 위치가 변경이 될 수 있다, 주소값이 변경되면 변경된 주소의 데이터만 가져올 수 있음(데이터 손실)
 *                     ======> 메모리 주소의 복구가 어렵다
 *             -a-
 *             
 *             100   => 100 -----------
 *             ---            ------ age
 *                              25
 *                            ------ name
 *                             홍길동
 *                            ------
 *                          -----------
 *             -b-
 *             100  =>(x)200 ----------- GC(가비지 컬렉션): 데이터 사라짐
 *             ---            ------ age
 *                              20
 *                            ------ name
 *                             심청이
 *                            ------
 *                          -----------
 *             
 *             
 *    2) 정적변수 (클래스변수,공유변수) => 한 개의 공간만 생성 // 하나가 바꾸면 모든 사람이 바뀜
 *       => 공유변수 : 오라클
 *     형식) [접근지정어] static 데이터형 변수명 = 값(또는 디폴트값)
 *          int => 0
 *          double => 0.0
 *          boolean => false
 *          String,배열,클래스 => null(주소가 저장이 안된 상태) //주소가 없으면 접근 못함
 *          => 생성시점 : 컴파일러에 의해 자동으로 메모리 저장
 *          => new가 없어도 사용이 가능
 *  ------------------
 *   생성자
 *    1) 객체가 생성될 때 호출되는 메소드
 *       A a=new A()
 *               ----생성자
 *    2) 특징
 *       = 클래스명과 동일하다
 *       = 리턴타입이 없다
 *       = 생성자가 없는 경우에 추가(매개변수가 없는 생성자가 추가)
 *                           ---------------- 기본생성자 default
 *       = 멤버변수의 초기화
 *       = 생성자는 여러개 사용이 가능(한 개의 클래스)
 *       = 데이터베이스 연결, 네트워크 연결, 윈도우...
 *       = 자동추가
 *         -----     (생략된 부분)
 *         import - java.lang.*(자동으로 추가되어 있음)
 *                  ----------- String, Math, System
 *         class A - extends Object
 *             
 *         생성자 - 기본생성자()
 *         reutrn - void
 *         
 *         class A
 *         {
 *           A(){} --- 생성자
 *           void A(){} --- 일반 메소드
 *           A(int a){} --- 생성자 오버로딩
 *           A(int a,int b){} --- 생성자 오버로딩
 *         }
 *    3) 역할
 *       = 시작과 동시에 처리
 *       예) 자동 로그인
 *          오라클 연결
 *          서버 연결
 *       = 멤버변수의 초기화
 *         class A
 *         {
 *           int a;
 *           A()
 *           {
 *             // 파일읽기, 크롤링...
 *                = 구현해서 초기화
 *             init()
 *           }
 *         }
 *       = 필요시마다 사용한다(생략 가능)
 *                       --- 컴파일러에 의해 자동으로 추가
 *  ------------------
 *   메소드
 *    1) 역할: 다른 클래스와 통신(연결)
 *    2) 수정(오버라이딩), 추가(오버로딩)
 *    3) 반복제거
 *    4) 구조적인 프로그램 (단락을 나눠서 처리) => 오류, 수정
 *    5) 메소드는 호출시마다 처음부터 끝까지
 *    6) 구성요소
 *      1 결과값(리턴타입)
 *        => 리턴타입으로 사용
 *          - 기본형 int, double, char, boolean, long
 *          - 배열 int[], double[]...(같은 데이터형 여러개)
 *          - 클래스 String, 사용자 정의 (다른 데이터형 여러개)
 *             => 클래스 => 배열로 사용이 가능 (데이터형)
 *             => 기본형 (자바에서 지원=>지원하지 않는 것이 많다)
 *                프로그래머가 만들어서 처리 => 클래스
 *             => 클래스의 첫번째 기능 => 사용자 정의 데이터형
 *                ---- 형변환, 대입..(class는 기본형과 똑같이 사용이 가능하다)
 *             
 *      2 메소드명 : 식별자 => 변수, 클래스, 인터페이스, 메소드
 *                => 변수, 메소드는 소문자
 *                => 클래스, 인터페이스는 대문자
 *                => 문자길이는 상관없다 (3~10자 권장, 의미부여 o) => 대부분 7
 *                => 한글은 가급적 사용하지 않는다
 *      3 매개변수(사용자 요청)
 *    ***** 사용자의 요청값을 받아서 요청 처리 결과를 도출
 *    ***** 최소화시킨다(3개 이상이면 => 배열, 클래스)
 *          예) 정수 10개를 보내주고 정렬해라
 *             (int a,int b...) -> (int[] arr)
 *             회원가입
 *             (String id, String pwd, String name, String sex, int age...) -> (Member m)
 *          메소드 유형
 *           => 리턴타입 (x or 1개만 존재) => 여러개일 때 묶어서 배열
 *           => 매개변수 (x or 1개이상 존재)
 *          ---------------
 *           리턴타입   매개변수
 *          ---------------
 *             o        o => 가장 많이 사용
 *           자바 자체에서 처리 / 자바 데이터를 브라우저로 
 *          ---------------
 *             o        x
 *          ---------------
 *             x        o
 *          ---------------
 *             x        x
 *          ---------------
 *          메소드 형식
 *          [접근지정어][옵션] 리턴타입 메소드명(매개변수..) 선언부
 *          { 구현부        ------결과값  --------사용자 요청
 *            옵션: static, abstract, final
 *            연산/제어
 *            return 값; // void일 경우에는 생략이 가능
 *          }
 *  ------------------
 * }
 * 
 */
public class 생성자_1 {
	// 생성자_1(){} // 자동으로 추가(매개변수가 없는 상태에서만 가능)
	 
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		// return; // 컴파일러가 자동으로 추가
		
	}

}
